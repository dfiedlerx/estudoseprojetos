O modelo API vêm sendo usado recentemente usado diversas em aplicações. Isso ocorreu porque atualmente aplicações não podem apenas
contar com seus próprios dados. Para que um projeto possa atingir ser total potencial, ele deve ser capaz de lidar com
apicações de terceitos e além disso, ter seus dados facilmente acessíveis para desenvolvedores.

Pense em como Facebook provém uma api para fornecer seu dados (desde que voce seja autenticado, é claro). Facebook
também permite que aplicações de terceiros e outros serviços possam acessar esses dados. Isso é feito através de uma
API.

Agora quando nós falamos sobre fazer nossa próprias APIS, sempre chegaremos ao topico de como podemos proteger nossas
próprias APIs.


USos do JWT:

 - Autenticação: Esses é o cenário mais comum para uso do JWT. Uma vez que o usuário esteja logado, cada requisição
 subsequente irá incluir o JWT, permitindo que o usuário acesse routas, serviços e recursos que sejam permitidos por
 aquele token. Single Sign On é um característica que utiliza amplamente JWT hoje em dia, por causa de sua pequena
 sobrecarga e sua habilidade de ser facilmente usada em diferentes domínios.

 - Intercâmbio de Informações: JSON Web Tokens são um bom caminho para tranmissões seguras de informações entre partes.
   Por causa que JWTs podem ser assinadas - por exemplo, usando pares de chaves publicas/privadas - voce pode ter
   certeza de que os remetentes são quem eles dizem que são. Além disso, como a assinatura é calculada usando o
   cabeçalho e a carga util, voce também pode verificar se o conteúdo não foi adulterado.

Estrutura do JWT:

JSON Web Tokens consistem em três partes separadas por pontos (.) sendo eles:
 - Header (Cabeçalho)
 -Payload
 -Signature

Assim sendo, uma JWT tipicamente se parece com o seguinte:
 xxxxx.yyyyy.zzzzz

Vamos dividir-lo em diferentes partes.

 Header
  O header tipicamente consiste em duas partes: o tipo do token que é JWT e o algoritmo de hashing podendo ser
  HMAC SHA256 ou RSA.

 Payload
  A segunda parte do token é o payload que contem as reinvidicações. Reinvidicações são aformações spbre uma entidade
  (tipicamente o usuário) e metadata adicional. Estes são os três tipos de reinvidicações: reservada, public e privada.

   - Reinvidicações Reservadas: Estes são um conjunto de reinvidicações predefinidas que não são obrigatórias, mas
     recomendadas para fornecer um conjunto de usáveis e interoperáveis reinvidicações. Algumas delas são:
      * iss(emissor), exp (Tempo de expiração), sub (assunto), aud (audiência), dentre outros.
   - Reinvidicações Publicas: Estas podem ser definidas a vontade para aqueles que usar JWTs. Porém para evitar colisões,
     elas devem ser definidas no registro do IANA jSON Web ou definida como URI que tenha um namespace resistente à
     colisão.
   -  Reinvidicações Privadas: Estas são as reinvidicações customizadas criadas para compartilhar informação entre
      partes que aceitem mutualmente o uso.

 Assinatura
  Para criar a parte de assinatura, voce deve obter  o header e o payload criptografados, uma chave secreta, um
  algoritmo especificado na header e a partir desses dados criar a assinatura.
  A assinatura e usada para verificar se o remetente do JWT é quem diz que é e se por acaso a mensagem foi ou não
  alterada ao longo do caminho.


Juntando Tudo
 A saida são três strings Base64 separadas por pontos e que podem facilmente ser passadas nos ambientes HTML e HTTP.
 Enquanto é mais compacto quando comparado aos padrões baseados em XML como o SAML.
 Se voce procuta utilizar JWT e colocar os seus conceitos em pratica, voce pode usar jwt.io Debugger para decodificar,
 verificar e gerar JWTs.


Como funciona o JSON Web Tokens?
 Na autenticação, quando um usuário logar com sucesso usando suas credenciais, um JSON Web Token é retornado e será salvo
 localmente (tipicalmente no disco local, porém cookies também podem ser usados), em vez da tradicional abordagem de
 criar uma sessão no servidor e retornar um cookie.

 Sempre que o usuário quiser acessar uma rota ou recurso protegido, o agente do usuário envia a JWT, geralmente no header
 de autorizaçã usando the BEares shema.

 Esse é um mecanismo de autenticação sem estado sendo que o estado do usuário nunca é salvo na memória do sistema. As
 rotas protegidas dos servidores irão checkar se o JWT é valido no header de Autorização, e se for verdade, o usuário
 estará permitido para acessar os recursos protegidos. COmo as JWTs são autônomas, todas as informações necessárias
 estão la, reduzindo a necessidade de múltiplas consultas ao banco de dados.

 Isso permite que voce possa confiar plenamente nos dados das APIs e que possa fazer requisiçõas para outros serviços.
 Não importa quais domínios consomem sua API, já que , Cross-Origin Resource (CORS) não será um problema pois não usa
 cookies.